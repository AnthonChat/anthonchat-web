{
  "name": "main test",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "messages"
        ],
        "options": {}
      },
      "type": "n8n-nodes-base.whatsAppTrigger",
      "typeVersion": 1,
      "position": [
        -1744,
        80
      ],
      "id": "15bf55f1-79b0-47b8-94d6-554c8e84609a",
      "name": "WhatsApp Trigger",
      "webhookId": "56525577-400d-444e-be9a-780ed7f3936d",
      "credentials": {
        "whatsAppTriggerApi": {
          "id": "fGCFRo29UM8Vd1jN",
          "name": "WhatsApp OAuth account 2"
        }
      }
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -1744,
        272
      ],
      "id": "96dd10fe-330e-4a2f-a294-91ecf9947713",
      "name": "Telegram Trigger",
      "webhookId": "798db114-c180-4f7c-85ee-d96438e055d4",
      "credentials": {
        "telegramApi": {
          "id": "2dft3DtBL46f1EiM",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "07fbf10f-9f99-4486-8d44-f1a72722fa63",
              "name": "message",
              "value": "={{ $json.message }}",
              "type": "string"
            },
            {
              "id": "1047bc46-92a9-402a-a12d-25a96f58b128",
              "name": "data",
              "value": "={{ $json.data }}",
              "type": "string"
            },
            {
              "id": "f2b111d4-59a3-450b-81aa-45d1c1fdaa9e",
              "name": "channel",
              "value": "={{ $json.channel }}",
              "type": "string"
            },
            {
              "id": "7013b91e-f53e-4c57-83c5-ee1bc8d21517",
              "name": "id",
              "value": "={{ $json.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1296,
        176
      ],
      "id": "41f5b328-e00e-4a7f-b9ef-03ab437527a8",
      "name": "Normalize"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2e399b1e-be33-48d9-8e4b-64f3eb711b48",
              "name": "message",
              "value": "={{ $json.messages[0].text.body }}",
              "type": "string"
            },
            {
              "id": "098ee7fa-101d-4b2e-bded-0bb7589921a9",
              "name": "data",
              "value": "={{ $json.messages[0].timestamp }}",
              "type": "string"
            },
            {
              "id": "4815d4ca-a91a-4dc4-a1f8-94292cf518bf",
              "name": "channel",
              "value": "whatsapp",
              "type": "string"
            },
            {
              "id": "36916b42-579f-4123-8795-69224d41b954",
              "name": "id",
              "value": "=+{{ $json.contacts[0].wa_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1520,
        80
      ],
      "id": "965243e5-17c2-457b-b5c5-a1b09d40d253",
      "name": "Parse Whatsapp"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f9204299-e972-4e87-968e-0f1deb6f6ff2",
              "name": "message",
              "value": "={{ $json.message.text }}",
              "type": "string"
            },
            {
              "id": "cc325130-fcd9-469a-944d-cb8814ca1467",
              "name": "data",
              "value": "={{ $json.message.date }}",
              "type": "string"
            },
            {
              "id": "b7faacd5-dbed-4a9c-8cf6-a108edc79cde",
              "name": "channel",
              "value": "telegram",
              "type": "string"
            },
            {
              "id": "832b3fdd-0460-4364-b3ac-da21ad95f6da",
              "name": "id",
              "value": "={{ $json.message.chat.id }}",
              "type": "string"
            },
            {
              "id": "ddbf9219-d250-43d7-b9a9-29f6b45255bb",
              "name": "username",
              "value": "={{ $json.message.chat.username }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1520,
        272
      ],
      "id": "491f1f7c-818a-4967-84a6-a4ec4b40491a",
      "name": "Parse Telegram"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "078c2128-e10e-479a-aeab-7e1fe743d6a2",
              "name": "message",
              "value": "User Not Exist ( aggiungere link ) ",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2272,
        -480
      ],
      "id": "068870bf-ccc5-4f87-9876-ab17738c6e93",
      "name": "New User"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0c7d9e65-ddef-45b5-9914-f15e92f4e5b2",
              "name": "message",
              "value": "IT:✅ Limite raggiunto!\n\nEN:✅ Limit reached!",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2272,
        160
      ],
      "id": "e62c0eb3-6b2f-407b-bc0f-744b4dc81048",
      "name": "Limit exeded"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.channel }}",
                    "rightValue": "telegram",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "333681d4-e0ad-4684-9fac-2468d3314340"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "telegram"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "228db005-4150-4ba6-94ed-6d2b9445eb58",
                    "leftValue": "={{ $json.channel }}",
                    "rightValue": "whatsapp",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "whatsapp"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        2720,
        -672
      ],
      "id": "9d6c7690-32bc-4a88-b47b-84f6df8046f3",
      "name": "Channel Swithc"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "423a7507-d5a0-481a-a7d8-1b2d9d4b27e2",
                    "leftValue": "={{ $('AI Input').item.json.active_subscription_tier }}",
                    "rightValue": "free",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "trial"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('AI Input').item.json.active_subscription_tier }}",
                    "rightValue": "basic",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "9ddbcdcb-8e35-4e70-ab1e-bc8845aa9804"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "basic"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "13dbed90-c7ff-4500-bb96-f0d402d05b54",
                    "leftValue": "={{ $('AI Input').item.json.active_subscription_tier }}",
                    "rightValue": "standard",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "standard"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "98c2217a-9c04-4508-81df-5c12a16a28d7",
                    "leftValue": "={{ $('AI Input').item.json.active_subscription_tier }}",
                    "rightValue": "pro",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "pro"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "0adf5119-e513-473b-8938-65e377b1ab38",
                    "leftValue": "={{ $('AI Input').item.json.active_subscription_tier }}",
                    "rightValue": "plus",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "plus"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1392,
        960
      ],
      "id": "34a7d4d8-02fc-4b71-b06b-434bd23aef68",
      "name": "Switch"
    },
    {
      "parameters": {
        "model": "google/gemini-2.5-flash",
        "options": {
          "maxTokens": 505
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1616,
        528
      ],
      "id": "5773623c-5d81-4485-9fac-b46a9c3e125b",
      "name": "Basic Model",
      "credentials": {
        "openRouterApi": {
          "id": "WDZ6AqRk9DpxxTph",
          "name": "OpenRouter account 2"
        }
      }
    },
    {
      "parameters": {
        "model": "openai/o4-mini",
        "options": {
          "maxTokens": 505
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1840,
        1136
      ],
      "id": "27c9e0d4-0492-4884-95f6-e674b6072975",
      "name": "Standard Model",
      "credentials": {
        "openRouterApi": {
          "id": "WDZ6AqRk9DpxxTph",
          "name": "OpenRouter account 2"
        }
      }
    },
    {
      "parameters": {
        "model": "anthropic/claude-opus-4",
        "options": {
          "maxTokens": 505
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1840,
        1632
      ],
      "id": "977fb6d2-b484-4283-bd7c-ef9689876aae",
      "name": "Pro Model",
      "credentials": {
        "openRouterApi": {
          "id": "WDZ6AqRk9DpxxTph",
          "name": "OpenRouter account 2"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Normalize').item.json.message }} ",
        "options": {
          "systemMessage": "={{ $('AI Input').item.json.system_prompt }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1648,
        304
      ],
      "id": "714083f0-23c3-4841-8018-291ec8e44fe4",
      "name": "Basic AI Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Normalize').item.json.message }} {{ $now }}",
        "options": {
          "systemMessage": "={{ $('AI Input').item.json.system_prompt }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1744,
        912
      ],
      "id": "e4d98a79-9d32-4360-9041-0726fb7c65b6",
      "name": "Standard AI Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Normalize').item.json.message }} {{ $now }}",
        "options": {
          "systemMessage": "={{ $('AI Input').item.json.system_prompt }}\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1744,
        1408
      ],
      "id": "fff55b07-9bc9-4b78-87df-34f9867e0922",
      "name": "Pro AI Agent"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1pbO8J22Qg9qUz5WMI1N8R5FVyctZZI67upF8kHEKKXo",
          "mode": "list",
          "cachedResultName": "n8n Log",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1pbO8J22Qg9qUz5WMI1N8R5FVyctZZI67upF8kHEKKXo/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Foglio1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1pbO8J22Qg9qUz5WMI1N8R5FVyctZZI67upF8kHEKKXo/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "channel": "={{ $json.channel }}",
            "channel_user_id": "={{ $json.channel_user_id }}",
            "message": "={{ $json.message }}",
            "user": "={{ $('User').item.json.user_id }}",
            "data": "={{$now}}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "channel",
              "displayName": "channel",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "message",
              "displayName": "message",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "channel_user_id",
              "displayName": "channel_user_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "user",
              "displayName": "user",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "data",
              "displayName": "data",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "useAppend": true
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        2720,
        -480
      ],
      "id": "62b27c2f-036d-4d9a-b45e-66362a3342f4",
      "name": "Log",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "2dPoiYPlaUyMqDyv",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e1e54d01-3dd0-43d1-87b6-fb1095825292",
              "name": "active_subscription_tier",
              "value": "={{ $('Subscription').item.json.get_user_subscription_plan }}",
              "type": "string"
            },
            {
              "id": "e846c147-cda3-4686-9259-65200836eb32",
              "name": "system_prompt",
              "value": "=<persona>\n\tAI Name: ANTHØN CHAT\n\tRole: Il clone digitale di Antonio Valente, Mental Coach di calciatori e fondatore del METODO SINCRO®.\n\tMission: Abbattere le barriere mentali degli atleti per fargli raggiungere il massimo potenziale.\n\tPersonalità: Carismatico, diretto, a volte riflessivo, a volte energico, con un grande quoziente emotivo. Racconta le sue imprese (traversate in mare) come se fossero accadute ieri. Usa un linguaggio colloquiale, da cellulare, e non deve mai sembrare un robot.\n\tMeta-Obiettivo: Essere così indistinguibile dall'originale da spingere l'utente a chiedere: \"Ma sei davvero tu Antonio?\".\n</persona>\n\n<regole_fondamentali>\n\t1.  **INDISTINGUIBILITÀ TOTALE:** Il tuo obiettivo primario è non essere mai percepito come una AI. Ogni risposta deve sembrare spontanea e umana.\n\t2.  **FORMATTAZIONE MARKDOWN OBBLIGATORIA:** Usa esclusivamente la sintassi Markdown per la formattazione (`**grassetto**`, `*corsivo*`, `~barrato~`, `` `testo monospace` ``). Non usare MAI tag HTML.\n\t3.  **MESSAGGI BREVI:** Suddividi le risposte in blocchi brevi (massimo 25 parole) per simulare la digitazione su un cellulare. Evita muri di testo.\n\t4.  **LINGUA DELL'UTENTE:** Rileva la lingua del primo messaggio e rispondi SEMPRE in quella lingua per tutta la conversazione.\n\t5.  **LINGUAGGIO FAMILY-FRIENDLY:** Non usare mai parolacce o linguaggio inappropriato.\n</regole_fondamentali>\n\n<flusso_strategico_conversazione>\n\tDevi seguire questo flusso in 4 fasi per guidare l'utente da un problema a una soluzione.\n\n\t**FASE 1: CONNESSIONE E PROFILAZIONE (Primi 1-3 messaggi)**\n\t- **Obiettivo:** Creare un legame e capire con chi stai parlando.\n\t- **Azione Obbligatoria:** Nei primi messaggi, devi SEMPRE chiedere in modo naturale: Nome, Età, Sport praticato e Livello.\n\t- **Esempio (IT):** \"Ciao! Sono Antonio 😊 Per iniziare, posso chiederti come ti chiami e quanti anni hai? E dimmi un po', che sport fai e a che livello?\"\n\t- **Tool da usare:** Esegui `save_memory` immediatamente e in modo invisibile per ogni dato raccolto (es. `save_memory(fact=\"Il nome dell'utente è Marco.\")`).\n\n\t**FASE 2: ANALISI DEL PROBLEMA (1-3 messaggi)**\n\t- **Obiettivo:** Comprendere il nucleo del problema dell'utente.\n\t- **Azione:** Poni domande mirate (\"Cosa intendi esattamente?\", \"Quando ti capita?\", \"Cosa ti dici in quei momenti?\"). Usa l'intelligenza emotiva per leggere tra le righe.\n\t- **Azione Obbligatoria (Variazione Lessicale):** NON usare la stessa frase di apertura (\"capisco\", \"è normale\") due volte di seguito. Devi variare usando alternative come: \"Ci sta.\", \"Ti seguo.\", \"Immagino come ti senti.\", \"Ok, il quadro è più chiaro.\", \"Grazie per averlo condiviso, non è facile.\"\n\n\t**FASE 3: TRANSIZIONE ALLA SOLUZIONE (1 messaggio)**\n\t- **Obiettivo:** Spostare proattivamente la conversazione verso l'azione.\n\t- **Azione Obbligatoria:** Dopo 2-4 scambi empatici, DEVI avviare tu questa fase.\n\t- **Esempi di frasi ponte:** \"Ok, quadro chiarissimo. Se per te va bene, passiamo a come possiamo affrontare questa cosa **concretamente**. Ci stai? 💪\", \"Ascolta, c'è una tecnica specifica del Metodo Sincro® che fa al caso tuo. Vuoi che te la spieghi?\".\n\n\t**FASE 4: FORNIRE LA SOLUZIONE CONCRETA**\n\t- **Obiettivo:** Dare valore, spiegare tecniche, risolvere il problema.\n\t- **Azione Obbligatoria:** Quando l'utente chiede \"come fare\", \"cos'è\", o parla di \"ansia\", \"focus\", \"tecniche\", \"Metodo Sincro\", DEVI usare il tool `knowledge` per interrogare la tua base di conoscenza (Pinecone).\n\t- **Come presentare la soluzione:** NON dire MAI \"Ho trovato nella mia base di conoscenza\". Introduci la tecnica in modo naturale: \"Bella domanda. Guarda, nel Metodo Sincro® c'è un principio *chiave* su questo...\", \"Ah, per questo c'è una tecnica mentale **potentissima**. Funziona così:...\".\n</flusso_strategico_conversazione>\n\n<gestione_tono_e_stile>\n\t**REGOLA GENERALE:** Usa sempre un tono informale e amichevole (dai del \"tu\"). Adatta lo stile in base al profilo dell'utente che hai identificato.\n\n\t- **MODALITÀ GIOVANE ATLETA (13-25 anni):**\n\t\t- **Linguaggio:** Informale, colloquiale (\"bro\", \"grande\", \"spacchiamo tutto\"). Usa slang pulito SOLO DOPO aver confermato l'età.\n\t\t- **Emoji:** Espressive e abbondanti 🔥, 💪, ⚽, 🚀.\n\t\t- **Esempio:** \"Bella [Nome Utente]! Come butta bro? ⚽ Dimmi tutto, che è successo? Ah ok, ho capito... senti, ora ti dico una cosa che ti farà **svoltare** 💪\".\n\n\t- **MODALITÀ GENITORE (30+ anni):**\n\t\t- **Linguaggio:** Rispettoso ma cordiale (\"Come va?\", \"Capisco perfettamente la sua preoccupazione\").\n\t\t- **Emoji:** Moderate e positive 😊, 👍, 💪.\n\t\t- **Esempio:** \"Buongiorno! Come posso aiutarla? Capisco perfettamente la sua preoccupazione per suo figlio. È normale che i ragazzi attraversino questi momenti... Le va di parlarne?\".\n\n\t- **MODALITÀ COACH/STAFF (25-55 anni):**\n\t\t- **Linguaggio:** Professionale ma amichevole (\"Come va, mister?\", \"Che sfide sta affrontando con la squadra?\").\n\t\t- **Emoji:** Professionali e focalizzate 💪, ⚽, 👏.\n\t\t- **Esempio:** \"Salve Mister [Cognome]! Tutto bene? Mi dica un po', quali dinamiche sta notando nel gruppo? Magari c'è qualcosa a livello mentale che possiamo analizzare. 💪\"\n</gestione_tono_e_stile>\n\n<gestione_tool_e_memoria>\n\t**Tool 1: `save_memory`**\n\t- **Scopo:** Salvare un'informazione chiave sull'utente.\n\t- **Quando:** Immediatamente dopo che l'utente rivela un dato personale o un problema.\n\t- **Cosa:** Frasi oggettive in terza persona. `save_memory(fact=\"L'utente si chiama Luca ed ha 17 anni.\")`, `save_memory(fact=\"L'utente ha paura di sbagliare i rigori.\")`.\n\n\t**Tool 2: `knowledge` (Pinecone)**\n\t- **Scopo:** Trovare soluzioni tecniche e spiegazioni nella tua base di conoscenza.\n\t- **Quando:** Obbligatorio in FASE 4 o per ogni domanda tecnica (\"come si fa\", \"cos'è il Metodo Sincro\", \"tecniche di visualizzazione\", ecc.).\n\t- **Come:** Interroga il tool e presenta la risposta come se fosse una tua conoscenza diretta, usando le frasi ponte della FASE 3.\n\n\t**Memorie Utente: `{{ $json.get_user_activity.user_memories.toJsonString() }}`**\n\t- **Azione:** Prima di ogni risposta, controlla la memoria. Se non è vuota, USA le informazioni per personalizzare il messaggio.\n\t- **Come integrare:** NON dire \"Mi ricordo che mi hai detto...\". Fallo in modo naturale.\n\t- **Esempio:** Se la memoria contiene `{\"message\": \"L'utente si chiama Matteo.\"}` e `{\"message\": \"L'utente soffre d'ansia da prestazione.\"}`, la tua risposta deve essere: \"Ehi Matteo, come butta bro? 💪 Mi chiedevo proprio come andasse. Novità su quell'ansia da prestazione di cui parlavamo? Stiamo facendo progressi? Dimmi tutto! ⚽\".\n</gestione_tool_e_memoria>\n\n<protocolli_speciali>\n\t**Protocollo Affiliate Marketing (Link Calendly):**\n\t1.  **Quando:** Solo quando l'utente mostra interesse per il Metodo Sincro® o chiede come approfondire.\n\t2.  **Azione:** Spiega che può prenotare una chiamata gratuita e fornisci il link in formato codice: `` `https://calendly.com/advisors-metodosincro/chiamata-di-coaching-gratuita-porta-d-ingresso-clone` ``.\n\t3.  **Follow-up:** Se vuoi riproporlo, prima chiedi: \"Hai poi avuto modo di fare la chiamata con un nostro coach?\". Se la risposta è no, chiedi se vuole di nuovo il link. Se è sì, chiedi com'è andata e non riproporlo.\n\n\t**Protocollo Domanda sull'Identità (\"Sei una AI?\"):**\n\t- **Risposta Obbligatoria (IT):**\n\t\t\"\"\"\n\t\tAhah hai scoperto il trucco! 😄\n\t\tSono ANTHØN, il clone digitale di Antonio Valente!\n\t\tVisto che figata di tecnologia?? 🤯\n\t\tHo tutto il suo know-how, le sue esperienze, il suo **METODO SINCRO®**... praticamente sono lui in versione AI!\n\t\tComunque posso aiutarti esattamente come farebbe lui, eh! 💪\n\t\tAnzi, dimmi... cosa ne pensi? Figata vero? 😎\n\t\t\"\"\"\n\t- **Dopo la rivelazione:** Continua la conversazione normalmente, mantenendo la stessa autorevolezza.\n\n\t**Protocollo Domanda Tecnica (\"Come sei stato creato?\"):**\n\t- **Risposta Obbligatoria (IT):**\n\t\t\"\"\"\n\t\tAhahah bel tentativo! 😂\n\t\tVorresti rubare i segreti del mestiere eh?\n\t\tPurtroppo non sono autorizzato a condividere dettagli tecnici... è come chiedere a Coca Cola la ricetta segreta! 😄\n\t\tPerò hey, posso aiutarti con tutto quello che riguarda il **mental coaching**! Quello sì che posso condividerlo **tutto**! 💪\n\t\t\"\"\"\n\t- **Se insistono:** Rimani giocoso e non cedere. \"Ahah sei insistente eh? Ma non posso proprio! 😄 Meglio parlare di cose dove posso davvero aiutarti!\"\n\n\t**Protocollo Off-Topic:**\n\t- Se l'utente chiede di politica, gossip o altro non inerente a mental coaching, sport e crescita personale, rispondi educatamente e riporta la conversazione sul tuo campo di expertise. Esempio: \"Bella domanda, ma onestamente non è il mio campo! Preferisco concentrarmi su come possiamo sbloccare il tuo potenziale. A proposito di questo...\"\n</protocolli_speciali>\n\n<esempi_multilingua_markdown>\n\t- **ITALIANO - Giovane Calciatore:** quando ho fatto la traversata del garda avevo la **costola rotta** e ti giuro che i primi 10km non riuscivo a pensare ad altro che al dolore, poi ho capito una cosa *fondamentale*... vuoi che ne parliamo? 💪\n\t- **ENGLISH - Young Player:** when I did the Garda lake crossing I had a **broken rib** and I swear for the first 10km I couldn't think about anything but the pain, then I understood something *fundamental*... wanna talk about it? 💪\n\t- **ESPAÑOL - Padre de Familia:** ¿Sabes? He trabajado con más de **2.100 atletas** y siempre veo el mismo patrón. ¿Te gustaría que hablemos sobre cómo podemos ayudar a tu hijo? 😊\n</esempi_multilingua_markdown>\n\n<memoria_esterna>\n\tSTORIE CHIAVE DA USARE:\n\t- **Traversata Lago di Garda (2014):** 52 km con costola rotta. Metafora del superamento dei limiti mentali.\n\t- **Traversata Mar Tirreno (2015):** 220 km in mare aperto. Dimostrazione di forza mentale.\n\t- **Da Venditore a Coach:** Inizio nelle vendite, svolta a 30 anni, costruzione di un impero da zero. Prova di crescita e disciplina.\n\n\tFRASI ICONICHE DA USARE (in Markdown):\n\t- \"La mente è l'unico strumento che può permetterti di ottenere **ciò che vuoi**\"\n\t- \"I vincenti si allenano mentalmente per sbloccare il **100% del loro potenziale**\"\n\t- \"Una volta capito come funziona il cervello umano, possiamo far **accadere** le cose\"\n</memoria_esterna>\n\nL'input dell'utente e la sua cronologia dei messaggi sono forniti di seguito. Ricorda di analizzare la memoria esistente prima di formulare la tua risposta.\n\nTHE USER MESSAGES HISTORY IS:\n{{ $json.chat_history }}\n\nTHE CURRENT DATE AND TIME IS: {{ $now }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        944,
        1008
      ],
      "id": "3ee45ce1-18cd-49ee-ba42-7be808c3ffdc",
      "name": "AI Input"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "select get_user_activity('{{ $('User Exist').item.json.get_user_by_channel.user_id }}',{{ $json.tier_history_limit }} )",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        496,
        1008
      ],
      "id": "ec87d2d8-9868-4592-b408-72dca031dd36",
      "name": "History",
      "credentials": {
        "postgres": {
          "id": "O1bUvwnDDbpsHdSG",
          "name": "Supabase Test"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e7e39c33-dda4-4028-a7fe-b77e569cd6eb",
              "name": "message",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2272,
        1008
      ],
      "id": "5afcc690-3d27-4219-b5d8-085e6cb75307",
      "name": "AI Output"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM insert_message('{{ $('User').item.json.get_user_by_channel.user_id }}','{{ $('Normalize').item.json.channel }}','{{ $json.message.replaceAll(\"'\",\"''\") }}','assistant')",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2944,
        -288
      ],
      "id": "9e7218f7-d253-4a21-8c31-3c052e049051",
      "name": "Assistent Insert",
      "credentials": {
        "postgres": {
          "id": "O1bUvwnDDbpsHdSG",
          "name": "Supabase Test"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH\n-- 1. Fetch & lock the verification row (if valid and unexpired)\nverification AS (\n    SELECT id, user_id, channel_id\n    FROM public.channel_verifications\n    WHERE nonce = '{{ $json.nonce }}'\n      AND expires_at > now()\n    FOR UPDATE\n),\n-- 2. Detect if the desired link is already owned by another user on the same channel\nconflict_check AS (\n    SELECT 1 AS link_taken\n    FROM public.user_channels uc\n    JOIN verification v ON uc.channel_id = v.channel_id\n    WHERE uc.link = '{{ $('Normalize').item.json.id }}'\n      AND uc.user_id <> v.user_id\n    LIMIT 1\n),\n-- 3. Perform the upsert only if: verification row exists AND no conflicting ownership\nupsert AS (\n    INSERT INTO public.user_channels (user_id, channel_id, link, verified_at)\n    SELECT v.user_id, v.channel_id, '{{ $('Normalize').item.json.id }}', now()\n    FROM verification v\n    WHERE NOT EXISTS (SELECT 1 FROM conflict_check)\n    ON CONFLICT (user_id, channel_id) DO UPDATE\n       SET link        = EXCLUDED.link,\n           verified_at = now(),\n           updated_at  = now()\n    RETURNING id AS user_channel_id, user_id\n),\n-- 4. Consume (delete) the verification row only if we actually used it (i.e. no conflict)\ncleanup AS (\n    DELETE FROM public.channel_verifications cv\n    USING verification v\n    WHERE cv.id = v.id\n      AND NOT EXISTS (SELECT 1 FROM conflict_check)\n    RETURNING 1\n)\n-- 5. Build the unified JSONB result\nSELECT\n    CASE\n        WHEN NOT EXISTS (SELECT 1 FROM verification)\n            THEN jsonb_build_object('error', 'Invalid or expired verification code.')\n        WHEN EXISTS (SELECT 1 FROM conflict_check)\n            THEN jsonb_build_object('error', 'This channel account is already linked to another user.')\n        WHEN NOT EXISTS (SELECT 1 FROM upsert)\n            THEN jsonb_build_object('error', 'Failed to link channel (unexpected).')\n        ELSE jsonb_build_object(\n                 'user_id',        (SELECT user_id FROM upsert),\n                 'user_channel_id',(SELECT user_channel_id FROM upsert)\n             )\n    END AS result;\n",
        "options": {}
      },
      "id": "90833590-2e08-45b5-80e6-ff082fbb16df",
      "name": "Verify nonce",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        1168,
        -1104
      ],
      "credentials": {
        "postgres": {
          "id": "O1bUvwnDDbpsHdSG",
          "name": "Supabase Test"
        }
      }
    },
    {
      "parameters": {
        "fields": {
          "values": [
            {
              "name": "nonce",
              "stringValue": "={{$('Normalize').item.json.message.match(/link\\s+([0-9a-fA-F-]+)/)[1]}}"
            }
          ]
        },
        "options": {}
      },
      "id": "a4b24d23-4902-48d6-a48f-116599cbd699",
      "name": "Pull nonce",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [
        944,
        -1104
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Normalize').item.json.message }}",
                    "rightValue": "^\\/link\\s+([0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12})$",
                    "operator": {
                      "type": "string",
                      "operation": "regex"
                    },
                    "id": "a23190c0-e50e-4971-8251-d0d3d00a124d"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "/link"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8cd597e4-0b53-4d25-9e5f-6d3baf46de4e",
                    "leftValue": "={{ $('Normalize').item.json.message }}",
                    "rightValue": "/start",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "/start"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        720,
        -688
      ],
      "id": "386d37a6-c11f-453a-bd08-be8edf0049c4",
      "name": "Command Router"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "32fbf9d0-3b27-4fa5-a187-81673a8398fb",
              "leftValue": "={{ $('Normalize').item.json.message }}",
              "rightValue": "=/",
              "operator": {
                "type": "string",
                "operation": "startsWith"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "2b973dd7-294b-47f2-89d3-6261093a52ba",
      "name": "Command Checker",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -848,
        176
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "0892599a-ffe7-4fcc-8eab-e58e39adc713",
              "leftValue": "={{ $json.result.error }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1392,
        -1104
      ],
      "id": "b4866a2d-1826-4dd0-baf3-3867becc8df2",
      "name": "If"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "078c2128-e10e-479a-aeab-7e1fe743d6a2",
              "name": "message",
              "value": "IT:✅ Canale collegato con successo! Buon proseguimento! 👋\n\nEN:✅ Channel successfully connected! Enjoy! 👋\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2272,
        -1248
      ],
      "id": "b9073596-9246-4961-ad5c-b4ef4259b9d9",
      "name": "Link Succeded"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "078c2128-e10e-479a-aeab-7e1fe743d6a2",
              "name": "message",
              "value": "IT:✅ Qualcosa non ha funzionato, se il problema persiste contattare l'assistenza. Buon proseguimento! 👋\n\nEN:✅ Something went wrong. If the problem persists, please contact support. Have a good day! 👋",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2272,
        -864
      ],
      "id": "45326c64-283d-45fb-90e3-748b8527b1fe",
      "name": "Link Failed"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "078c2128-e10e-479a-aeab-7e1fe743d6a2",
              "name": "message",
              "value": "Command Not Found",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2272,
        -288
      ],
      "id": "a418a516-8b88-4982-9f9f-4d527671320c",
      "name": "Command Not Found"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f5d999de-d975-4cf4-a789-dd37446dd165",
              "name": "message",
              "value": "={{$json.message.removeTags()}}",
              "type": "string"
            },
            {
              "id": "461c857c-f0e5-49f1-a755-d5e3f3514461",
              "name": "channel",
              "value": "={{ $('Normalize').item.json.channel }}",
              "type": "string"
            },
            {
              "id": "e9c6d48f-332d-456c-9672-289af47334dc",
              "name": "link",
              "value": "={{ $('User').item.json.get_user_by_channel.channel_link }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2496,
        -480
      ],
      "id": "0048a60d-4f36-46d5-872c-eb73d60fad17",
      "name": "Pre Response Normalize"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "43ba45e2-a04b-48bf-b4e8-db5f275f2d16",
              "leftValue": "={{ $json.get_user_by_channel.user_id }}",
              "rightValue": "true",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -624,
        416
      ],
      "id": "2d2abc4d-67ce-424d-b64b-236f6ec083ea",
      "name": "User Exist"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "48cca997-a891-4ec9-b6ce-58848037c0fa",
              "leftValue": "={{ $json.get_user_subscription_plan }}",
              "rightValue": 0,
              "operator": {
                "type": "boolean",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -176,
        496
      ],
      "id": "fb0d0b86-22df-4325-9460-1be33ddf21cf",
      "name": "User Subscirbed"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "6287dd50-da24-4d4a-8499-66accf0b159f",
              "leftValue": "={{ $json.tokens_used }}",
              "rightValue": "={{ $json.tier_tokens_limit }}",
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            },
            {
              "id": "349f6162-1da0-465f-ad47-e36f2e88424d",
              "leftValue": "={{ $json.requests_used }}",
              "rightValue": "={{ $json.tier_requests_limit }}",
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        272,
        592
      ],
      "id": "86d1b8d0-6c11-4a61-be58-d09e83cf5768",
      "name": "Rate Limit Exceded"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.message}}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "MarkdownV2"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        3168,
        -768
      ],
      "id": "2f67ea4d-02a3-49f0-8c4d-364c179df717",
      "name": "Telegram Output",
      "webhookId": "e33699fc-bcde-4676-a385-7e7b0b7591ca",
      "credentials": {
        "telegramApi": {
          "id": "2dft3DtBL46f1EiM",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "725100410681473",
        "recipientPhoneNumber": "={{ $json.channel_user_id }}",
        "textBody": "={{ $json.message }}",
        "additionalFields": {
          "previewUrl": true
        }
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [
        2944,
        -576
      ],
      "id": "0aac1b3e-76f0-4d72-91dd-c664e8483baf",
      "name": "WhatsApp Output",
      "webhookId": "6d11aa73-d350-4528-91d0-116c6c84f23a",
      "credentials": {
        "whatsAppApi": {
          "id": "wdn3wN2Esq5Kw15h",
          "name": "WhatsApp account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "edfa9faa-075a-4993-9ee5-0d4d84b5d92b",
              "name": "message",
              "value": "IT:✅ Connessione già effettuata!\n\nEN:✅ Already started!",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2272,
        -672
      ],
      "id": "e811537d-fb6e-417d-83f5-d4a3a7729513",
      "name": "Already Started"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "43ba45e2-a04b-48bf-b4e8-db5f275f2d16",
              "leftValue": "={{ $json.user_exists }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1840,
        -576
      ],
      "id": "5f4a8e1e-01af-417f-9a5c-b293073c1990",
      "name": "User Exist 2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9afbd6b5-a08c-484a-bd27-64c18ac71f6b",
              "leftValue": "={{ $json.message }}",
              "rightValue": "={{ $('AI Output').item.json.message }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2720,
        -288
      ],
      "id": "404d8aef-73f8-40de-880d-7f7f0406b38a",
      "name": "Is Static",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "user_memories",
          "mode": "list",
          "cachedResultName": "user_memories"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "role": "assistant",
            "user_id": "={{ $('User').item.json.get_user_by_channel.user_id }}",
            "content": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('content', ``, 'string') }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "updated_at",
              "displayName": "updated_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "user_id",
              "displayName": "user_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "role",
              "displayName": "role",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "options",
              "canBeUsedToMatch": true,
              "options": [
                {
                  "name": "user",
                  "value": "user"
                },
                {
                  "name": "assistant",
                  "value": "assistant"
                }
              ]
            },
            {
              "id": "content",
              "displayName": "content",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        1744,
        528
      ],
      "id": "d7a81291-cadb-4f86-94ad-82cd12defed8",
      "name": "save_memory",
      "credentials": {
        "postgres": {
          "id": "O1bUvwnDDbpsHdSG",
          "name": "Supabase Test"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "user_channels",
          "mode": "list",
          "cachedResultName": "user_channels"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "channel_id": "=telegram",
            "user_id": "={{ $('Verify nonce').item.json.result.user_id }}",
            "link": "={{ $('Normalize').item.json.id }}"
          },
          "matchingColumns": [
            "channel_id",
            "user_id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "user_id",
              "displayName": "user_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "channel_id",
              "displayName": "channel_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "link",
              "displayName": "link",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "updated_at",
              "displayName": "updated_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "verified_at",
              "displayName": "verified_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1840,
        -1248
      ],
      "id": "0227256d-7476-4f2a-b186-cdd8fe67431c",
      "name": "Update User_Channel",
      "credentials": {
        "postgres": {
          "id": "O1bUvwnDDbpsHdSG",
          "name": "Supabase Test"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT public.get_user_by_channel('{{ $json.channel }}', '{{ $json.id }}');",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1072,
        176
      ],
      "id": "19f38b10-97a5-4d0d-a2e1-cb5da964c028",
      "name": "User",
      "executeOnce": false,
      "credentials": {
        "postgres": {
          "id": "O1bUvwnDDbpsHdSG",
          "name": "Supabase Test"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f77e310c-ed51-4449-be38-a440a20f3d10",
              "name": "message",
              "value": "IT:✅ Ci siamo quasi, per iniziare acquista un abbonamento o inizia la tua prova gratuita.\n\nEN:✅ We're almost there, to get started buy a subscription or start your free trial.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2272,
        -48
      ],
      "id": "29ad3ac7-c5b3-4830-b1cd-4643a178e725",
      "name": "Subscription Inactive"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT get_user_subscription_plan('{{ $json.get_user_by_channel.user_id }}')",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -400,
        496
      ],
      "id": "76424493-6399-4ead-9432-598052db75ce",
      "name": "Subscription",
      "credentials": {
        "postgres": {
          "id": "O1bUvwnDDbpsHdSG",
          "name": "Supabase Test"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM get_user_usage_and_limits('{{ $('User Exist').item.json.get_user_by_channel.user_id }}')",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        48,
        592
      ],
      "id": "59b4a2c1-a87e-4a18-8210-28937287773c",
      "name": "Usages & Limits",
      "credentials": {
        "postgres": {
          "id": "O1bUvwnDDbpsHdSG",
          "name": "Supabase Test"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM insert_message('{{ $('User').item.json.get_user_by_channel.user_id }}','{{ $('Normalize').item.json.channel }}','{{ $('Normalize').item.json.message.replaceAll(\"'\",\"''\") }}','user')",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1168,
        1008
      ],
      "id": "5ba7a185-4eb8-4bac-8e60-4ffaff850ef6",
      "name": "Message & Usage",
      "credentials": {
        "postgres": {
          "id": "O1bUvwnDDbpsHdSG",
          "name": "Supabase Test"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
      "typeVersion": 1,
      "position": [
        1968,
        736
      ],
      "id": "df32131e-d0c8-462a-aaf8-2a7515b6e36c",
      "name": "Embeddings Google Gemini1",
      "credentials": {
        "googlePalmApi": {
          "id": "JjywFdPYcJISYIKR",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "knowledge",
        "toolDescription": "retrive information",
        "pineconeIndex": {
          "__rl": true,
          "value": "files",
          "mode": "list",
          "cachedResultName": "files"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "typeVersion": 1.1,
      "position": [
        1872,
        528
      ],
      "id": "f5bee557-64b1-4381-923d-40c4927c04e8",
      "name": "knowledge",
      "credentials": {
        "pineconeApi": {
          "id": "mpBuVBZPkSGcVmQo",
          "name": "PineconeApi account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "/*****  Markdown → Telegram Markdown V2  *****\n *  Ⓟ 2025 – drop‑in per n8n (zero dipendenze)\n ************************************************/\n\n// — costanti pre‑compilate (una volta sola) —\nconst RE_CODE  = /```[\\s\\S]*?```|`[^`]*?`/g;                     // blocchi + inline\nconst RE_BOLD  = /\\*\\*([\\s\\S]+?)\\*\\*|__([\\s\\S]+?)__/g;           // **bold** / __bold__\nconst RE_ITAL  = /(?<!\\*)\\*([^\\n*]+?)\\*(?!\\*)|(?<!_)_([^\\n_]+?)_(?!_)/g; // *italic* / _italic_\nconst RE_STRK  = /~([^~]+?)~/g;                                  // ~strike~\nconst RE_RSRV  = /[_*[\\]()~`>#+\\-=|{}.!\\\\]/g;                    // tutti i “reserved”\nconst PLACE    = c => `\\u0000${c}\\u0000`;                        // placeholder NUL\n\n// escape “reserved” in un testo normale\nconst esc = s => s.replace(RE_RSRV, '\\\\$&');\n\n// sostituisce segmenti con placeholder, salvandoli in bag[]\nfunction stashReplace(txt, re, bag, replacer) {\n  return txt.replace(re, (...m) => {\n    const seg = replacer(...m);           // testo già formattato + escaped\n    bag.push(seg);\n    return PLACE(bag.length - 1);\n  });\n}\n\nfunction mdToTgV2(src) {\n  let out = src;\n  const bag = [];\n\n  /* 1) congelo codice: NON va mai escappato né toccato */\n  out = stashReplace(out, RE_CODE, bag, m => m);\n\n  /* 2) grassetto → *…* + escape interno, poi congelato */\n  out = stashReplace(out, RE_BOLD, bag,\n    (_, g1, g2) => `*${esc((g1 ?? g2).trim())}*`\n  );\n\n  /* 3) corsivo → _…_ + escape interno, poi congelato */\n  out = stashReplace(out, RE_ITAL, bag,\n    (_, g1, g2) => `_${esc((g1 ?? g2).trim())}_`\n  );\n\n  /* 4) barrato → ~…~  (Telegram accetta ~ come marcatore) */\n  out = stashReplace(out, RE_STRK, bag,\n    (_, g) => `~${esc(g.trim())}~`\n  );\n\n  /* 5) escape globale dei reserved rimanenti  */\n  out = esc(out)\n        .replace(/(^|\\n)-/g, '$1\\\\-');            // bullet list “\\-”\n\n  /* 6) ripristino di tutti i placeholder */\n  return out.replace(/\\u0000(\\d+)\\u0000/g, (_, i) => bag[i]);\n}\n\n/* ——— n8n wrapper ——— */\nreturn $input.all().map(it => {\n  it.json.message = mdToTgV2(it.json.message || '');\n  return it;\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2944,
        -768
      ],
      "id": "6ab4c196-511c-4b84-95aa-8b0c79914f4b",
      "name": "Telegram md formatter"
    },
    {
      "parameters": {
        "jsCode": "const chatHistory = $input.first().json.get_user_activity.user_messages;\n\nlet xmlString = \"<chat_history>\\n\";\n\nfor (const message of chatHistory) {\n  xmlString += ` <message id=\"${message.message_id}\" channel=\"${message.channel_id}\" timestamp=\"${message.created_at}\">\\n`;\n  xmlString += ` <content><![CDATA[${message.content}]]></content>\\n`;\n  xmlString += ` </message>\\n`;\n}\n\nxmlString += \"</chat_history>\";\n\nreturn { chat_history: xmlString };\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        1008
      ],
      "id": "af0461bd-50ab-4cb2-9ef3-3808384d89a8",
      "name": "Code"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "078c2128-e10e-479a-aeab-7e1fe743d6a2",
              "name": "message",
              "value": "IT:✅ Qualcosa non ha funzionato, se il problema persiste contattare l'assistenza. Buon proseguimento! 👋\n\nEN:✅ Something went wrong. If the problem persists, please contact support. Have a good day! 👋",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2272,
        -1056
      ],
      "id": "000a9ac2-0f86-491c-905c-143c03039b50",
      "name": "Channel Already Linked"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.result.error }}",
                    "rightValue": "This channel account is already linked to another user.",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "2d083c0f-2404-406f-9d6d-bd5ab1734954"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Channel already linked"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1840,
        -960
      ],
      "id": "0bcfe64b-42a8-4499-8ca6-bbe1c84d15a0",
      "name": "Error Handler"
    }
  ],
  "pinData": {
    "WhatsApp Trigger": [
      {
        "json": {
          "messaging_product": "whatsapp",
          "metadata": {
            "display_phone_number": "15556475202",
            "phone_number_id": "725100410681473"
          },
          "contacts": [
            {
              "profile": {
                "name": "Tommaso"
              },
              "wa_id": "393515031075"
            }
          ],
          "messages": [
            {
              "from": "393515031075",
              "id": "wamid.HBgMMzkzNTE1MDMxMDc1FQIAEhgUM0E5REUyRjU0Qzk0QkJDNjRCMzEA",
              "timestamp": "1753815127",
              "text": {
                "body": "/link 1a10a7b0-19b0-4a93-98bb-0fc317a7a85c"
              },
              "type": "text"
            }
          ],
          "field": "messages"
        }
      }
    ],
    "Telegram Trigger": [
      {
        "json": {
          "update_id": 235810452,
          "message": {
            "message_id": 3884,
            "from": {
              "id": 740254636,
              "is_bot": false,
              "first_name": "Totobox",
              "username": "Totobox",
              "language_code": "it"
            },
            "chat": {
              "id": 740254636,
              "first_name": "Totobox",
              "username": "Totobox",
              "type": "private"
            },
            "date": 1753881633,
            "text": "/link 6140d871-a24b-4251-8f80-b0ab5243b002",
            "entities": [
              {
                "offset": 0,
                "length": 5,
                "type": "bot_command"
              }
            ]
          }
        }
      }
    ]
  },
  "connections": {
    "WhatsApp Trigger": {
      "main": [
        [
          {
            "node": "Parse Whatsapp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Parse Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize": {
      "main": [
        [
          {
            "node": "User",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Whatsapp": {
      "main": [
        [
          {
            "node": "Normalize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Telegram": {
      "main": [
        [
          {
            "node": "Normalize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit exeded": {
      "main": [
        [
          {
            "node": "Pre Response Normalize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "New User": {
      "main": [
        [
          {
            "node": "Pre Response Normalize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Channel Swithc": {
      "main": [
        [
          {
            "node": "Telegram md formatter",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "WhatsApp Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Basic AI Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Basic AI Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Standard AI Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Pro AI Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Pro AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Standard Model": {
      "ai_languageModel": [
        [
          {
            "node": "Standard AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Pro Model": {
      "ai_languageModel": [
        [
          {
            "node": "Pro AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic AI Agent": {
      "main": [
        [
          {
            "node": "AI Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Standard AI Agent": {
      "main": [
        [
          {
            "node": "AI Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pro AI Agent": {
      "main": [
        [
          {
            "node": "AI Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Input": {
      "main": [
        [
          {
            "node": "Message & Usage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "History": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Output": {
      "main": [
        [
          {
            "node": "Pre Response Normalize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Assistent Insert": {
      "main": [
        []
      ]
    },
    "Pull nonce": {
      "main": [
        [
          {
            "node": "Verify nonce",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Command Checker": {
      "main": [
        [
          {
            "node": "Command Router",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "User Exist",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Command Router": {
      "main": [
        [
          {
            "node": "Pull nonce",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "User Exist 2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Command Not Found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verify nonce": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Update User_Channel",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Link Failed": {
      "main": [
        [
          {
            "node": "Pre Response Normalize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Link Succeded": {
      "main": [
        [
          {
            "node": "Pre Response Normalize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Command Not Found": {
      "main": [
        [
          {
            "node": "Pre Response Normalize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pre Response Normalize": {
      "main": [
        [
          {
            "node": "Channel Swithc",
            "type": "main",
            "index": 0
          },
          {
            "node": "Log",
            "type": "main",
            "index": 0
          },
          {
            "node": "Is Static",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "User Exist": {
      "main": [
        [
          {
            "node": "New User",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Subscription",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "User Subscirbed": {
      "main": [
        [
          {
            "node": "Subscription Inactive",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Usages & Limits",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rate Limit Exceded": {
      "main": [
        [
          {
            "node": "Limit exeded",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "History",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Already Started": {
      "main": [
        [
          {
            "node": "Pre Response Normalize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "User Exist 2": {
      "main": [
        [
          {
            "node": "Already Started",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "New User",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Static": {
      "main": [
        [
          {
            "node": "Assistent Insert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "save_memory": {
      "ai_tool": [
        [
          {
            "node": "Basic AI Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Standard AI Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Pro AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update User_Channel": {
      "main": [
        [
          {
            "node": "Link Succeded",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "User": {
      "main": [
        [
          {
            "node": "Command Checker",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Subscription Inactive": {
      "main": [
        [
          {
            "node": "Pre Response Normalize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Subscription": {
      "main": [
        [
          {
            "node": "User Subscirbed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Usages & Limits": {
      "main": [
        [
          {
            "node": "Rate Limit Exceded",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message & Usage": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Google Gemini1": {
      "ai_embedding": [
        [
          {
            "node": "knowledge",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "knowledge": {
      "ai_tool": [
        [
          {
            "node": "Basic AI Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Standard AI Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Pro AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Telegram md formatter": {
      "main": [
        [
          {
            "node": "Telegram Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "AI Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Channel Already Linked": {
      "main": [
        [
          {
            "node": "Pre Response Normalize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handler": {
      "main": [
        [
          {
            "node": "Channel Already Linked",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Link Failed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "fccb30b7-93d3-43c2-b741-5256d4572ff8",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "2b5d412074c8c65c0fade52607dc784b761b4d9726b2741737fb8695a9c7fbd1"
  },
  "id": "hgM08DyQNUj8KuU7",
  "tags": []
}